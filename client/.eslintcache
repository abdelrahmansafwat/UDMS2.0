[{"C:\\Users\\Beta\\Documents\\Projects\\GovDas2.0\\client\\src\\index.js":"1","C:\\Users\\Beta\\Documents\\Projects\\GovDas2.0\\client\\src\\Dashboard.js":"2","C:\\Users\\Beta\\Documents\\Projects\\GovDas2.0\\client\\src\\Register.js":"3","C:\\Users\\Beta\\Documents\\Projects\\GovDas2.0\\client\\src\\history.js":"4","C:\\Users\\Beta\\Documents\\Projects\\GovDas2.0\\client\\src\\Login.js":"5","C:\\Users\\Beta\\Documents\\Projects\\GovDas2.0\\client\\src\\Routes.js":"6","C:\\Users\\Beta\\Documents\\Projects\\GovDas2.0\\client\\src\\Dashboard2.js":"7","C:\\Users\\Beta\\Documents\\Projects\\GovDas2.0\\client\\src\\Login2.js":"8","C:\\Users\\Beta\\Documents\\Projects\\GovDas2.0\\client\\src\\Print.js":"9"},{"size":320,"mtime":1612346509000,"results":"10","hashOfConfig":"11"},{"size":69867,"mtime":1613408693314,"results":"12","hashOfConfig":"11"},{"size":9258,"mtime":1612778019506,"results":"13","hashOfConfig":"11"},{"size":89,"mtime":1612346509000,"results":"14","hashOfConfig":"11"},{"size":7702,"mtime":1613573251329,"results":"15","hashOfConfig":"11"},{"size":945,"mtime":1613407979197,"results":"16","hashOfConfig":"11"},{"size":89075,"mtime":1613585822668,"results":"17","hashOfConfig":"11"},{"size":7708,"mtime":1613407785007,"results":"18","hashOfConfig":"11"},{"size":3558,"mtime":1613585684883,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ovs7qh",{"filePath":"22","messages":"23","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},"C:\\Users\\Beta\\Documents\\Projects\\GovDas2.0\\client\\src\\index.js",[],"C:\\Users\\Beta\\Documents\\Projects\\GovDas2.0\\client\\src\\Dashboard.js",["40","41","42","43","44","45"],"import React, { useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Brightness6Icon from \"@material-ui/icons/Brightness6\";\r\nimport AddCircleIcon from \"@material-ui/icons/AddCircle\";\r\nimport LocalOfferIcon from \"@material-ui/icons/LocalOffer\";\r\nimport MeetingRoomIcon from \"@material-ui/icons/MeetingRoom\";\r\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\r\nimport { DataGrid } from \"@material-ui/data-grid\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport history from \"./history\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport GavelIcon from \"@material-ui/icons/Gavel\";\r\nimport SupervisorAccountIcon from \"@material-ui/icons/SupervisorAccount\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {\r\n  MuiPickersUtilsProvider,\r\n  KeyboardDatePicker,\r\n} from \"@material-ui/pickers\";\r\nimport { ThemeProvider } from \"@material-ui/core\";\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { useForm, Controller } from \"react-hook-form\";\r\nconst axios = require(\"axios\");\r\n\r\nconst light = {\r\n  palette: {\r\n    type: \"light\",\r\n  },\r\n};\r\n\r\nconst dark = {\r\n  palette: {\r\n    type: \"dark\",\r\n  },\r\n};\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\"Copyright Â© \"}\r\n      <Link color=\"inherit\" href=\"http://www.eelu.edu.eg/\">\r\n        National Egyptian E-Learning University\r\n      </Link>{\" \"}\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst drawerWidth = 250;\r\n\r\nexport default function Dashboard() {\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      display: \"flex\",\r\n    },\r\n    toolbar: {\r\n      paddingRight: 24,\r\n    },\r\n    toolbarIcon: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"flex-end\",\r\n      padding: \"0 8px\",\r\n      ...theme.mixins.toolbar,\r\n    },\r\n    appBar: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      transition: theme.transitions.create([\"width\", \"margin\"], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n    },\r\n    appBarShift: {\r\n      marginLeft: drawerWidth,\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      transition: theme.transitions.create([\"width\", \"margin\"], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    menuButton: {\r\n      marginRight: 36,\r\n    },\r\n    menuButtonHidden: {\r\n      display: \"none\",\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n    drawerPaper: {\r\n      position: \"relative\",\r\n      whiteSpace: \"nowrap\",\r\n      width: drawerWidth,\r\n      transition: theme.transitions.create(\"width\", {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    drawerPaperClose: {\r\n      overflowX: \"hidden\",\r\n      transition: theme.transitions.create(\"width\", {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      width: theme.spacing(7),\r\n      [theme.breakpoints.up(\"sm\")]: {\r\n        width: theme.spacing(9),\r\n      },\r\n    },\r\n    appBarSpacer: theme.mixins.toolbar,\r\n    viewDialog: {\r\n      top: \"10%\",\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      height: \"100vh\",\r\n      overflow: \"auto\",\r\n    },\r\n    container: {\r\n      paddingTop: theme.spacing(4),\r\n      paddingBottom: theme.spacing(4),\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      display: \"flex\",\r\n      overflow: \"hidden\",\r\n      flexDirection: \"column\",\r\n      height: \"75vh\",\r\n    },\r\n    fixedHeight: {\r\n      height: 240,\r\n    },\r\n    dflex: {\r\n      display: \"flex\",\r\n      flexDirection: \"row\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n    },\r\n    paperChips: {\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      flexWrap: \"wrap\",\r\n      listStyle: \"none\",\r\n      padding: theme.spacing(0.5),\r\n      margin: 0,\r\n    },\r\n    chip: {\r\n      margin: theme.spacing(0.5),\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const [privilege, setPrivilege] = useState(history.location.state.privilege);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [decisions, setDecisions] = useState([]);\r\n  const [authError, setAuthError] = useState(false);\r\n  const [viewDialog, setViewDialog] = useState(false);\r\n  const [updateDialog, setUpdateDialog] = useState(false);\r\n  const [varsDialog, setVarsDialog] = useState(false);\r\n  const [constructorHasRun, setConstructorHasRun] = useState(false);\r\n  const [currentDecision, setCurrentDecision] = useState({});\r\n  const [title, setTitle] = useState(\"\");\r\n  const [summary, setSummary] = useState(\"\");\r\n  const [issuedBy, setIssuedBy] = useState(\"\");\r\n  const [date, setDate] = useState(new Date());\r\n  const [tags, setTags] = useState([]);\r\n  const [issuers, setIssuers] = useState([]);\r\n  const [selectedTags, setSelectedTags] = useState([]);\r\n  const [selectedIssuers, setSelectedIssuers] = useState([]);\r\n  const [titleError, setTitleError] = useState(false);\r\n  const [summaryError, setSummaryError] = useState(false);\r\n  const [issuedByError, setIssuedByError] = useState(false);\r\n  const [tagsError, setTagsError] = useState(false);\r\n  const [addOrUpdate, setAddOrUpdate] = useState(\"Add\");\r\n  const [image, setImage] = useState({});\r\n  const [imageName, setImageName] = useState(\"\");\r\n  const [imageError, setImageError] = useState(false);\r\n  const [lightTheme, setLightTheme] = useState(true);\r\n  const [newTagOrIssuer, setNewTagOrIssuer] = useState(\"\");\r\n  const [selectedNewTagOrIssuer, setSelectedNewTagOrIssuer] = useState(\"\");\r\n  const [ready, setReady] = useState(false);\r\n  const [updateProgress, setUpdateProgress] = useState(false);\r\n  const [administration, setAdministration] = useState(false);\r\n  const [users, setUsers] = useState([]);\r\n  const [firstName, setFirstName] = useState(history.location.state.firstName);\r\n  const [lastName, setLastName] = useState(history.location.state.lastName);\r\n  const [email, setEmail] = useState(history.location.state.email);\r\n  const [userPrivilege, setUserPrivilege] = useState(\"\");\r\n  const [userDialog, setUserDialog] = useState(false);\r\n  const [userId, setUserId] = useState(\"\");\r\n  const [decisionId, setDecisionId] = useState(\"\");\r\n  const [boardDialog, setBoardDialog] = useState(\"\");\r\n  const [boardSubject, setBoardSubject] = useState(\"\");\r\n  const [boardDecision, setBoardDecision] = useState(\"\");\r\n  const [boardDepartment, setBoardDepartment] = useState(\"\");\r\n  const [boardStatus, setBoardStatus] = useState(\"\");\r\n  const [boardDate, setBoardDate] = useState(\"\");\r\n  const [board, setBoard] = useState(false);\r\n  const [boardDecisions, setBoardDecisions] = useState(false);\r\n  const [currentBoardDecision, setCurrentBoardDecision] = useState([]);\r\n  const [boardDecisionId, setBoardDecisionId] = useState(\"\");\r\n  const [boardViewDialog, setBoardViewDialog] = useState(false);\r\n  const { control } = useForm();\r\n\r\n  const ITEM_HEIGHT = 48;\r\n  const ITEM_PADDING_TOP = 8;\r\n  const MenuProps = {\r\n    PaperProps: {\r\n      style: {\r\n        maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n        width: 250,\r\n      },\r\n    },\r\n  };\r\n\r\n  const appliedTheme = createMuiTheme(lightTheme ? light : dark);\r\n\r\n  const filterModel = {\r\n    items: [{ columnField: \"title\", operatorValue: \"contains\", value: \"\" }],\r\n  };\r\n\r\n  const baordDecisionsColumns = [\r\n    { field: \"id\", headerName: \"ID\", width: 70, filterable: false },\r\n    { field: \"subject\", headerName: \"Subject\", width: 130 },\r\n    { field: \"department\", headerName: \"Department\", width: 130 },\r\n    { field: \"decision\", headerName: \"Decision\", width: 130 },\r\n    { field: \"date\", headerName: \"Date\", type: \"date\", width: 130 },\r\n    { field: \"status\", headerName: \"Status\", width: 130 },\r\n    {\r\n      field: \"viewButton\",\r\n      headerName: \"View\",\r\n      width: 130,\r\n      disableClickEventBubbling: true,\r\n      filterable: false,\r\n      sortable: false,\r\n      renderCell: (params) => {\r\n        //console.log(params.row.viewButton);\r\n        var index = params.row.id;\r\n\r\n        const onClick = async () => {\r\n          console.log(\"Viewing decision #\" + index);\r\n          var decision = boardDecisions[index - 1];\r\n          /*\r\n          await axios\r\n            .get(\"/api/retrieve_decisions/image/\" + decision.image, {\r\n              responseType: \"arraybuffer\",\r\n            })\r\n            .then(\r\n              (response) =>\r\n                (decision.imageBase64 =\r\n                  \"data:;base64,\" +\r\n                  Buffer.from(response.data, \"binary\").toString(\"base64\"))\r\n            );\r\n          */\r\n          setCurrentBoardDecision(decision);\r\n          setBoardViewDialog(true);\r\n        };\r\n\r\n        return (\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={() => onClick()}\r\n            disabled={privilege < 2}\r\n          >\r\n            View\r\n          </Button>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      field: \"updateButton\",\r\n      headerName: \"Update\",\r\n      width: 130,\r\n      disableClickEventBubbling: true,\r\n      sortable: false,\r\n      filterable: false,\r\n      renderCell: (params) => {\r\n        //console.log(params.row.viewButton);\r\n\r\n        const onClick = async () => {\r\n          setBoardSubject(params.row.subject);\r\n          setBoardDecision(params.row.decision);\r\n          setBoardDepartment(params.row.department);\r\n          setBoardStatus(params.row.status);\r\n          setBoardDate(params.row.date);\r\n          setBoardDecisionId(params.row._id);\r\n          setAddOrUpdate(\"Update\");\r\n          //setTitleError(false);\r\n          //setSummaryError(false);\r\n          //setTagsError(false);\r\n          //setIssuedByError(false);\r\n          setBoardDialog(true);\r\n        };\r\n\r\n        return (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => onClick()}\r\n            disabled={privilege < 2}\r\n          >\r\n            Update\r\n          </Button>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      field: \"deleteButton\",\r\n      headerName: \"Delete\",\r\n      width: 130,\r\n      disableClickEventBubbling: true,\r\n      sortable: false,\r\n      filterable: false,\r\n      renderCell: (params) => {\r\n        //console.log(params.row.viewButton);\r\n        var index = params.row.id;\r\n\r\n        const onClick = async () => {\r\n          console.log(\"Viewing decision #\" + index);\r\n          var decision = boardDecisions[index - 1];\r\n          var alldecisions = boardDecisions;\r\n          axios\r\n            .post(\"/api/upload_board_decisions/delete\", {\r\n              _id: decision._id,\r\n            })\r\n            .then(function (response) {\r\n              console.log(response);\r\n              console.log(alldecisions.length);\r\n              alldecisions.splice(index - 1, 1);\r\n              console.log(alldecisions.length);\r\n              setBoardDecisions(alldecisions);\r\n              //history.push(\"/dashboard\");\r\n            })\r\n            .catch(function (error) {\r\n              console.log(error);\r\n              if (error) {\r\n                setErrorMessage(\"An error occured. Please try again.\");\r\n                setAuthError(true);\r\n              }\r\n            });\r\n        };\r\n\r\n        return (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            onClick={() => onClick()}\r\n            disabled={privilege < 2}\r\n          >\r\n            Delete\r\n          </Button>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  const decisionsColumns = [\r\n    { field: \"id\", headerName: \"ID\", width: 70, filterable: false },\r\n    { field: \"title\", headerName: \"Title\", width: 130 },\r\n    { field: \"issuedby\", headerName: \"Issued By\", width: 130 },\r\n    { field: \"summary\", headerName: \"Summary\", width: 130 },\r\n    { field: \"date\", headerName: \"Date\", type: \"date\", width: 130 },\r\n    { field: \"tags\", headerName: \"Tags\", width: 130 },\r\n    {\r\n      field: \"viewButton\",\r\n      headerName: \"View\",\r\n      width: 130,\r\n      disableClickEventBubbling: true,\r\n      filterable: false,\r\n      sortable: false,\r\n      renderCell: (params) => {\r\n        //console.log(params.row.viewButton);\r\n        var index = params.row.id;\r\n\r\n        const onClick = async () => {\r\n          console.log(\"Viewing decision #\" + index);\r\n          var decision = decisions[index - 1];\r\n          /*\r\n          await axios\r\n            .get(\"/api/retrieve_decisions/image/\" + decision.image, {\r\n              responseType: \"arraybuffer\",\r\n            })\r\n            .then(\r\n              (response) =>\r\n                (decision.imageBase64 =\r\n                  \"data:;base64,\" +\r\n                  Buffer.from(response.data, \"binary\").toString(\"base64\"))\r\n            );\r\n          */\r\n          decision.imageBase64 =\r\n            \"https://govdas.s3.eu-central-1.amazonaws.com/\" + decision.image;\r\n          setCurrentDecision(decision);\r\n          setViewDialog(true);\r\n        };\r\n\r\n        return (\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={() => onClick()}\r\n            disabled={privilege < 2}\r\n          >\r\n            View\r\n          </Button>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      field: \"updateButton\",\r\n      headerName: \"Update\",\r\n      width: 130,\r\n      disableClickEventBubbling: true,\r\n      sortable: false,\r\n      filterable: false,\r\n      renderCell: (params) => {\r\n        //console.log(params.row.viewButton);\r\n\r\n        const onClick = async () => {\r\n          setTitle(params.row.title);\r\n          setSummary(params.row.summary);\r\n          setSelectedTags(params.row.tags);\r\n          setIssuedBy(params.row.issuedby);\r\n          setDate(params.row.date);\r\n          setDecisionId(params.row._id);\r\n          setAddOrUpdate(\"Update\");\r\n          setTitleError(false);\r\n          setSummaryError(false);\r\n          setTagsError(false);\r\n          setIssuedByError(false);\r\n          setUpdateDialog(true);\r\n        };\r\n\r\n        return (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => onClick()}\r\n            disabled={privilege < 2}\r\n          >\r\n            Update\r\n          </Button>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      field: \"deleteButton\",\r\n      headerName: \"Delete\",\r\n      width: 130,\r\n      disableClickEventBubbling: true,\r\n      sortable: false,\r\n      filterable: false,\r\n      renderCell: (params) => {\r\n        //console.log(params.row.viewButton);\r\n        var index = params.row.id;\r\n\r\n        const onClick = async () => {\r\n          console.log(\"Viewing decision #\" + index);\r\n          var decision = decisions[index - 1];\r\n          var alldecisions = decisions;\r\n          axios\r\n            .post(\"/api/upload_decisions/delete\", {\r\n              _id: decision._id,\r\n              oldimage: decision.image,\r\n            })\r\n            .then(function (response) {\r\n              console.log(response);\r\n              console.log(alldecisions.length);\r\n              alldecisions.splice(index - 1, 1);\r\n              console.log(alldecisions.length);\r\n              setDecisions(alldecisions);\r\n              //history.push(\"/dashboard\");\r\n            })\r\n            .catch(function (error) {\r\n              console.log(error);\r\n              if (error) {\r\n                setErrorMessage(\"An error occured. Please try again.\");\r\n                setAuthError(true);\r\n              }\r\n            });\r\n        };\r\n\r\n        return (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            onClick={() => onClick()}\r\n            disabled={privilege < 2}\r\n          >\r\n            Delete\r\n          </Button>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  const usersColumns = [\r\n    { field: \"id\", headerName: \"ID\", width: 70, filterable: false },\r\n    { field: \"firstName\", headerName: \"First Name\", width: 130 },\r\n    { field: \"lastName\", headerName: \"Last Name\", width: 130 },\r\n    { field: \"privilege\", headerName: \"Privilege\", width: 130 },\r\n    {\r\n      field: \"updateButton\",\r\n      headerName: \"Update\",\r\n      width: 130,\r\n      disableClickEventBubbling: true,\r\n      sortable: false,\r\n      filterable: false,\r\n      renderCell: (params) => {\r\n        //console.log(params.row.viewButton);\r\n\r\n        const onClick = async () => {\r\n          setUserId(params.row._id);\r\n          setFirstName(params.row.firstName);\r\n          setLastName(params.row.lastName);\r\n          setEmail(params.row.email);\r\n          setUserPrivilege(params.row.privilege);\r\n          console.log(params.row._id);\r\n          setUserDialog(true);\r\n        };\r\n\r\n        return (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => onClick()}\r\n            disabled={privilege < 2}\r\n          >\r\n            Update\r\n          </Button>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      field: \"deleteButton\",\r\n      headerName: \"Delete\",\r\n      width: 130,\r\n      disableClickEventBubbling: true,\r\n      sortable: false,\r\n      filterable: false,\r\n      renderCell: (params) => {\r\n        //console.log(params.row.viewButton);\r\n        var index = params.row.id;\r\n\r\n        const onClick = async () => {\r\n          console.log(\"Viewing decision #\" + index);\r\n          var user = users[index - 1];\r\n          var allusers = users;\r\n          axios\r\n            .post(\"/api/user/delete\", {\r\n              _id: user._id,\r\n            })\r\n            .then(function (response) {\r\n              console.log(response);\r\n              console.log(allusers.length);\r\n              allusers.splice(index - 1, 1);\r\n              console.log(allusers.length);\r\n              setUsers(allusers);\r\n              //history.push(\"/dashboard\");\r\n            })\r\n            .catch(function (error) {\r\n              console.log(error);\r\n              if (error) {\r\n                setErrorMessage(\"An error occured. Please try again.\");\r\n                setAuthError(true);\r\n              }\r\n            });\r\n        };\r\n\r\n        return (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            onClick={() => onClick()}\r\n            disabled={privilege < 2}\r\n          >\r\n            Delete\r\n          </Button>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  const getAllDecisions = async () => {\r\n    //console.log(history.location.state.privilege);\r\n    setReady(false);\r\n    if (privilege > 0) {\r\n      axios.create({ baseURL: window.location.origin });\r\n      await axios\r\n        .get(\"/api/retrieve_decisions/all\")\r\n        .then(function (response) {\r\n          var decisions = response.data.decisions;\r\n          decisions.forEach((value, index) => {\r\n            decisions[index].id = index + 1;\r\n            decisions[index].date = new Date(\r\n              decisions[index].date\r\n            ).toLocaleDateString();\r\n\r\n            decisions[index].updateButton = (\r\n              <Button variant=\"contained\" color=\"primary\">\r\n                Update\r\n              </Button>\r\n            );\r\n          });\r\n          console.log(decisions);\r\n          setDecisions(decisions);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n          setAuthError(true);\r\n          setErrorMessage(\"An error occured. Please try again.\");\r\n        });\r\n\r\n      await axios\r\n        .post(\"/api/var/retrieve\", { name: \"tags\" })\r\n        .then(function (response) {\r\n          var tags = response.data.vars[0].vars;\r\n          console.log(tags);\r\n          setTags(tags);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n          setAuthError(true);\r\n          setErrorMessage(\"An error occured. Please try again.\");\r\n        });\r\n\r\n      await axios\r\n        .post(\"/api/var/retrieve\", { name: \"issuers\" })\r\n        .then(function (response) {\r\n          var issuers = response.data.vars[0].vars;\r\n          console.log(issuers);\r\n          setIssuers(issuers);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n          setAuthError(true);\r\n          setErrorMessage(\"An error occured. Please try again.\");\r\n        });\r\n    }\r\n    setReady(true);\r\n  };\r\n\r\n  const getAllBoardDecisions = async () => {\r\n    //console.log(history.location.state.privilege);\r\n    setReady(false);\r\n    if (privilege > 0) {\r\n      axios.create({ baseURL: window.location.origin });\r\n      await axios\r\n        .get(\"/api/retrieve_board_decisions/all\")\r\n        .then(function (response) {\r\n          var decisions = response.data.decisions;\r\n          decisions.forEach((value, index) => {\r\n            decisions[index].id = index + 1;\r\n            decisions[index].date = new Date(\r\n              decisions[index].date\r\n            ).toLocaleDateString();\r\n          });\r\n          console.log(decisions);\r\n          setBoardDecisions(decisions);\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n          setAuthError(true);\r\n          setErrorMessage(\"An error occured. Please try again.\");\r\n        });\r\n    }\r\n    setReady(true);\r\n  };\r\n\r\n  const getAllUsers = async () => {\r\n    //console.log(history.location.state.privilege);\r\n    setReady(false);\r\n    await axios\r\n      .get(\"/api/user/all\")\r\n      .then(function (response) {\r\n        var users = response.data.users;\r\n        users.forEach((value, index) => {\r\n          users[index].id = index + 1;\r\n          if (users[index].privilege === 0) {\r\n            users[index].privilege = \"None\";\r\n          } else if (users[index].privilege === 1) {\r\n            users[index].privilege = \"View\";\r\n          } else if (users[index].privilege === 2) {\r\n            users[index].privilege = \"View/Update\";\r\n          } else if (users[index].privilege === 3) {\r\n            users[index].privilege = \"Admin\";\r\n          }\r\n        });\r\n        console.log(users);\r\n        setUsers(users);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n        setAuthError(true);\r\n        setErrorMessage(\"An error occured. Please try again.\");\r\n      });\r\n    setReady(true);\r\n  };\r\n\r\n  const constructor = async () => {\r\n    if (constructorHasRun) return;\r\n    setConstructorHasRun(true);\r\n    await getAllDecisions();\r\n  };\r\n\r\n  constructor();\r\n\r\n  const handleTagsDelete = (chipToDelete) => () => {\r\n    setSelectedTags((chips) => chips.filter((chip) => chip !== chipToDelete));\r\n  };\r\n\r\n  const handleIssuersDelete = (chipToDelete) => () => {\r\n    setSelectedIssuers((chips) =>\r\n      chips.filter((chip) => chip !== chipToDelete)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={appliedTheme}>\r\n      <div className={classes.root}>\r\n        <CssBaseline />\r\n        <AppBar\r\n          position=\"absolute\"\r\n          className={clsx(classes.appBar, open && classes.appBarShift)}\r\n        >\r\n          <Toolbar className={classes.toolbar}>\r\n            <IconButton\r\n              edge=\"start\"\r\n              color=\"inherit\"\r\n              aria-label=\"open drawer\"\r\n              onClick={handleDrawerOpen}\r\n              className={clsx(\r\n                classes.menuButton,\r\n                open && classes.menuButtonHidden\r\n              )}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n            <Typography\r\n              component=\"h1\"\r\n              variant=\"h6\"\r\n              color=\"inherit\"\r\n              noWrap\r\n              className={classes.title}\r\n            >\r\n              Dashboard\r\n            </Typography>\r\n            <IconButton\r\n              color=\"inherit\"\r\n              onClick={() => setLightTheme(!lightTheme)}\r\n            >\r\n              <Brightness6Icon />\r\n            </IconButton>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Drawer\r\n          variant=\"permanent\"\r\n          classes={{\r\n            paper: clsx(classes.drawerPaper, !open && classes.drawerPaperClose),\r\n          }}\r\n          open={open}\r\n        >\r\n          <div className={classes.toolbarIcon}>\r\n            <IconButton onClick={handleDrawerClose}>\r\n              <ChevronLeftIcon />\r\n            </IconButton>\r\n          </div>\r\n          <Divider />\r\n          <List>\r\n            <div>\r\n              <ListItem\r\n                button\r\n                onClick={(event) => {\r\n                  event.preventDefault();\r\n                  event.stopPropagation();\r\n                  if (administration) {\r\n                    getAllUsers();\r\n                  } else if (board) {\r\n                    getAllBoardDecisions();\r\n                  } else {\r\n                    getAllDecisions();\r\n                  }\r\n                }}\r\n              >\r\n                <ListItemIcon>\r\n                  <RefreshIcon />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Refresh\" />\r\n              </ListItem>\r\n\r\n              {privilege > 1 && (\r\n                <ListItem\r\n                  button\r\n                  onClick={(event) => {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n\r\n                    if (board) {\r\n                      setBoardSubject(\"\");\r\n                      setBoardDecision(\"\");\r\n                      setBoardDepartment(\"\");\r\n                      setBoardStatus([]);\r\n                      setBoardDate(new Date());\r\n                      setAddOrUpdate(\"Add\");\r\n                      //setTitleError(false);\r\n                      //setSummaryError(false);\r\n                      //setTagsError(false);\r\n                      //setIssuedByError(false);\r\n                      setBoardDialog(true);\r\n                    } else {\r\n                      setTitle(\"\");\r\n                      setSummary(\"\");\r\n                      setSelectedTags([]);\r\n                      setSelectedIssuers([]);\r\n                      setDate(new Date());\r\n                      setAddOrUpdate(\"Add\");\r\n                      setTitleError(false);\r\n                      setSummaryError(false);\r\n                      setTagsError(false);\r\n                      setIssuedByError(false);\r\n                      setUpdateDialog(true);\r\n                    }\r\n                  }}\r\n                >\r\n                  <ListItemIcon>\r\n                    <AddCircleIcon />\r\n                  </ListItemIcon>\r\n                  <ListItemText primary=\"Add Decision\" />\r\n                </ListItem>\r\n              )}\r\n\r\n              {privilege > 1 && !board && (\r\n                <ListItem\r\n                  button\r\n                  onClick={(event) => {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    setVarsDialog(true);\r\n                  }}\r\n                >\r\n                  <ListItemIcon>\r\n                    <LocalOfferIcon />\r\n                  </ListItemIcon>\r\n                  <ListItemText primary=\"Add Tags/Issuers\" />\r\n                </ListItem>\r\n              )}\r\n            </div>\r\n          </List>\r\n          <Divider />\r\n          <List>\r\n            <div>\r\n              <ListItem\r\n                button\r\n                onClick={(event) => {\r\n                  event.preventDefault();\r\n                  event.stopPropagation();\r\n                  var privilegeLevel = \"\";\r\n                  if (history.location.state.privilege === 0) {\r\n                    privilegeLevel = \"None\";\r\n                  } else if (history.location.state.privilege === 1) {\r\n                    privilegeLevel = \"View\";\r\n                  } else if (history.location.state.privilege === 2) {\r\n                    privilegeLevel = \"View/Update\";\r\n                  } else if (history.location.state.privilege === 3) {\r\n                    privilegeLevel = \"Admin\";\r\n                  }\r\n                  setFirstName(history.location.state.firstName);\r\n                  setLastName(history.location.state.lastName);\r\n                  setEmail(history.location.state.email);\r\n                  setUserPrivilege(privilegeLevel);\r\n                  setUserDialog(true);\r\n                }}\r\n              >\r\n                <ListItemIcon>\r\n                  <AccountCircleIcon />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"User\" />\r\n              </ListItem>\r\n              {privilege > 1 && (\r\n                <ListItem\r\n                  button\r\n                  onClick={(event) => {\r\n                    getAllUsers();\r\n                    setAdministration(true);\r\n                  }}\r\n                >\r\n                  <ListItemIcon>\r\n                    <SupervisorAccountIcon />\r\n                  </ListItemIcon>\r\n                  <ListItemText primary=\"Admin\" />\r\n                </ListItem>\r\n              )}\r\n              <ListItem\r\n                button\r\n                onClick={(event) => {\r\n                  /*\r\n                  if(board){\r\n                    getAllDecisions();\r\n                    setBoard(false);\r\n                  }\r\n                  else {\r\n                    getAllBoardDecisions();\r\n                    setBoard(true);\r\n                  }\r\n                  */\r\n                  getAllDecisions();\r\n                  setAdministration(false);\r\n                }}\r\n              >\r\n                <ListItemIcon>\r\n                  <GavelIcon />\r\n                </ListItemIcon>\r\n                {/*<ListItemText primary={ board ? \"Government Decisions\" : \"Board Decisions\" } />*/}\r\n                <ListItemText primary={ !board ? \"Government Decisions\" : \"Board Decisions\" } />\r\n              </ListItem>\r\n              <ListItem\r\n                button\r\n                onClick={(event) => {\r\n                  event.preventDefault();\r\n                  event.stopPropagation();\r\n                  history.push(\"/login\");\r\n                }}\r\n              >\r\n                <ListItemIcon>\r\n                  <MeetingRoomIcon />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Logout\" />\r\n              </ListItem>\r\n            </div>\r\n          </List>\r\n        </Drawer>\r\n        <main className={classes.content}>\r\n          <div className={classes.appBarSpacer} />\r\n          <Container maxWidth=\"lg\" className={classes.container}>\r\n            <Paper className={classes.paper}>\r\n              {!ready && (\r\n                <CircularProgress\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    left: \"50%\",\r\n                    top: \"50%\",\r\n                  }}\r\n                />\r\n              )}\r\n              {ready && !administration && !board && (\r\n                <DataGrid\r\n                  rows={decisions}\r\n                  columns={decisionsColumns}\r\n                  pageSize={5}\r\n                  checkboxSelection\r\n                  showToolbar={true}\r\n                  filterModel={filterModel}\r\n                />\r\n              )}\r\n\r\n              {ready && !administration && board && (\r\n                <DataGrid\r\n                  rows={boardDecisions}\r\n                  columns={baordDecisionsColumns}\r\n                  pageSize={5}\r\n                  checkboxSelection\r\n                  showToolbar={true}\r\n                  filterModel={filterModel}\r\n                />\r\n              )}\r\n\r\n              {ready && administration && (\r\n                <DataGrid\r\n                  rows={users}\r\n                  columns={usersColumns}\r\n                  pageSize={5}\r\n                  checkboxSelection\r\n                  showToolbar={true}\r\n                  filterModel={filterModel}\r\n                />\r\n              )}\r\n            </Paper>\r\n            <Box pt={4}>\r\n              <Copyright />\r\n            </Box>\r\n          </Container>\r\n\r\n          <Dialog\r\n            open={varsDialog}\r\n            TransitionComponent={Transition}\r\n            keepMounted\r\n            onClose={() => setVarsDialog(false)}\r\n            aria-labelledby=\"alert-dialog-slide-title\"\r\n            aria-describedby=\"alert-dialog-slide-description\"\r\n          >\r\n            <DialogTitle id=\"alert-dialog-slide-title\">\r\n              {\"Add Tags or Issuers\"}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n              <Grid\r\n                container\r\n                direction={\"column\"}\r\n                spacing={1}\r\n                className={classes.dflex}\r\n              >\r\n                <Grid item xs={6}>\r\n                  <Controller\r\n                    name=\"newTagOrIssuer\"\r\n                    as={\r\n                      <TextField\r\n                        value={newTagOrIssuer}\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        fullWidth\r\n                        id=\"addTagIssuer\"\r\n                        label=\"Tag or Issuer\"\r\n                        name=\"addTagIssuer\"\r\n                        onChange={(e) => {\r\n                          setNewTagOrIssuer(e.target.value);\r\n                        }}\r\n                      />\r\n                    }\r\n                    control={control}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <FormControl variant=\"outlined\" fullWidth>\r\n                    <Select\r\n                      labelId=\"demo-mutiple-chip-label\"\r\n                      id=\"demo-mutiple-chip\"\r\n                      value={selectedNewTagOrIssuer}\r\n                      onChange={(selected) => {\r\n                        //var newSelectedTags = tags;\r\n                        //newSelectedTags.push(selected.target.value);\r\n                        setSelectedNewTagOrIssuer(selected.target.value);\r\n                      }}\r\n                      input={<Input id=\"select-multiple-chip\" />}\r\n                      MenuProps={MenuProps}\r\n                    >\r\n                      <MenuItem key={\"Tag\"} value={\"Tag\"}>\r\n                        <ListItemText primary={\"Tag\"} />\r\n                      </MenuItem>\r\n                      <MenuItem key={\"Issuer\"} value={\"Issuer\"}>\r\n                        <ListItemText primary={\"Issuer\"} />\r\n                      </MenuItem>\r\n                    </Select>\r\n                  </FormControl>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    component=\"span\"\r\n                    fullWidth\r\n                    onClick={(event) => {\r\n                      event.preventDefault();\r\n                      event.stopPropagation();\r\n                      axios.create({ baseURL: window.location.origin });\r\n                      axios\r\n                        .post(\"/api/var/update\", {\r\n                          name: selectedNewTagOrIssuer.toLowerCase() + \"s\",\r\n                          var: control.getValues().newTagOrIssuer,\r\n                        })\r\n                        .then(function (response) {\r\n                          //console.log(newTagOrIssuer);\r\n                          setVarsDialog(false);\r\n                          if (selectedNewTagOrIssuer === \"Tag\") {\r\n                            var oldTags = tags;\r\n                            oldTags.push(newTagOrIssuer);\r\n                            setTags(oldTags);\r\n                          } else {\r\n                            var oldIssuers = issuers;\r\n                            oldIssuers.push(newTagOrIssuer);\r\n                            setIssuers(oldIssuers);\r\n                          }\r\n                        })\r\n                        .catch(function (error) {\r\n                          console.log(error);\r\n                          if (error) {\r\n                            setErrorMessage(\r\n                              \"An error occured. Please try again.\"\r\n                            );\r\n                            setAuthError(true);\r\n                          }\r\n                        });\r\n                    }}\r\n                  >\r\n                    Submit\r\n                  </Button>\r\n                </Grid>\r\n              </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={() => setVarsDialog(false)} color=\"primary\">\r\n                Close\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n          <Dialog\r\n            fullScreen\r\n            open={viewDialog}\r\n            onClose={() => setViewDialog(false)}\r\n            TransitionComponent={Transition}\r\n          >\r\n            <AppBar className={classes.appBar}>\r\n              <Toolbar>\r\n                <IconButton\r\n                  edge=\"start\"\r\n                  color=\"inherit\"\r\n                  onClick={() => setViewDialog(false)}\r\n                  aria-label=\"close\"\r\n                >\r\n                  <CloseIcon />\r\n                </IconButton>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                  View Decision\r\n                </Typography>\r\n              </Toolbar>\r\n            </AppBar>\r\n            <List className={classes.viewDialog}>\r\n              <img alt=\"decision\" src={currentDecision.imageBase64} />\r\n              <ListItem button>\r\n                <ListItemText\r\n                  primary=\"Title\"\r\n                  secondary={currentDecision.title}\r\n                />\r\n              </ListItem>\r\n              <Divider />\r\n              <ListItem button>\r\n                <ListItemText\r\n                  primary=\"Issued By\"\r\n                  secondary={currentDecision.issuedby}\r\n                />\r\n              </ListItem>\r\n              <Divider />\r\n              <ListItem button>\r\n                <ListItemText\r\n                  primary=\"Summary\"\r\n                  secondary={currentDecision.summary}\r\n                />\r\n              </ListItem>\r\n              <Divider />\r\n              <ListItem button>\r\n                <ListItemText primary=\"Date\" secondary={currentDecision.date} />\r\n              </ListItem>\r\n              <Divider />\r\n              <ListItem button>\r\n                <ListItemText\r\n                  primary=\"Tags\"\r\n                  secondary={\r\n                    currentDecision.tags &&\r\n                    currentDecision.tags.map((data) => {\r\n                      return (\r\n                        <li key={data}>\r\n                          <Chip label={data} className={classes.chip} />\r\n                        </li>\r\n                      );\r\n                    })\r\n                  }\r\n                />\r\n              </ListItem>\r\n              <Divider />\r\n            </List>\r\n          </Dialog>\r\n\r\n          <Dialog\r\n            fullScreen\r\n            open={boardViewDialog}\r\n            onClose={() => setBoardViewDialog(false)}\r\n            TransitionComponent={Transition}\r\n          >\r\n            <AppBar className={classes.appBar}>\r\n              <Toolbar>\r\n                <IconButton\r\n                  edge=\"start\"\r\n                  color=\"inherit\"\r\n                  onClick={() => setBoardViewDialog(false)}\r\n                  aria-label=\"close\"\r\n                >\r\n                  <CloseIcon />\r\n                </IconButton>\r\n                <Typography variant=\"h6\" className={classes.title}>\r\n                  View Decision\r\n                </Typography>\r\n              </Toolbar>\r\n            </AppBar>\r\n            <List className={classes.viewDialog}>\r\n              <ListItem button>\r\n                <ListItemText\r\n                  primary=\"Subject\"\r\n                  secondary={currentBoardDecision.subject}\r\n                />\r\n              </ListItem>\r\n              <Divider />\r\n              <ListItem button>\r\n                <ListItemText\r\n                  primary=\"Department\"\r\n                  secondary={currentBoardDecision.department}\r\n                />\r\n              </ListItem>\r\n              <Divider />\r\n              <ListItem button>\r\n                <ListItemText\r\n                  primary=\"Decision\"\r\n                  secondary={currentBoardDecision.decision}\r\n                />\r\n              </ListItem>\r\n              <Divider />\r\n              <ListItem button>\r\n                <ListItemText\r\n                  primary=\"Date\"\r\n                  secondary={currentBoardDecision.date}\r\n                />\r\n              </ListItem>\r\n              <Divider />\r\n              <ListItem button>\r\n                <ListItemText\r\n                  primary=\"Status\"\r\n                  secondary={currentBoardDecision.status}\r\n                />\r\n              </ListItem>\r\n              <Divider />\r\n            </List>\r\n          </Dialog>\r\n\r\n          <Dialog\r\n            open={updateDialog}\r\n            onClose={() => setUpdateDialog(false)}\r\n            aria-labelledby=\"form-dialog-title\"\r\n          >\r\n            <DialogTitle id=\"form-dialog-title\">{addOrUpdate}</DialogTitle>\r\n            <DialogContent>\r\n              <Controller\r\n                name=\"title\"\r\n                as={\r\n                  <TextField\r\n                    error={titleError}\r\n                    value={title}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"title\"\r\n                    label=\"Title\"\r\n                    name=\"title\"\r\n                    autoComplete=\"title\"\r\n                    helperText={titleError ? \"Required\" : \"\"}\r\n                    onChange={(e) => {\r\n                      if (e.target.value === \"\") {\r\n                        setTitleError(true);\r\n                        setTitle(e.target.value);\r\n                      } else {\r\n                        setTitleError(false);\r\n                        setTitle(e.target.value);\r\n                      }\r\n                    }}\r\n                    onBlur={() => {\r\n                      if (title === \"\") {\r\n                        setTitleError(true);\r\n                      }\r\n                    }}\r\n                    autoFocus\r\n                  />\r\n                }\r\n                control={control}\r\n              />\r\n\r\n              <FormControl variant=\"outlined\" fullWidth>\r\n                <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                  Issuer\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-mutiple-chip-label\"\r\n                  id=\"demo-mutiple-chip\"\r\n                  value={selectedIssuers}\r\n                  onChange={(selected) => {\r\n                    //var newSelectedTags = tags;\r\n                    //newSelectedTags.push(selected.target.value);\r\n                    setSelectedIssuers(selected.target.value);\r\n                  }}\r\n                  input={<Input id=\"select-multiple-chip\" />}\r\n                  MenuProps={MenuProps}\r\n                >\r\n                  {issuers.map(function (issuer) {\r\n                    return (\r\n                      <MenuItem key={issuer} value={issuer}>\r\n                        <ListItemText primary={issuer} />\r\n                      </MenuItem>\r\n                    );\r\n                  })}\r\n                </Select>\r\n              </FormControl>\r\n              <Controller\r\n                name=\"summary\"\r\n                as={\r\n                  <TextField\r\n                    error={summaryError}\r\n                    value={summary}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    multiline\r\n                    id=\"summary\"\r\n                    label=\"Summary\"\r\n                    name=\"summary\"\r\n                    autoComplete=\"summary\"\r\n                    helperText={summaryError ? \"Required\" : \"\"}\r\n                    onChange={(e) => {\r\n                      if (e.target.value === \"\") {\r\n                        setSummaryError(true);\r\n                        setSummary(e.target.value);\r\n                      } else {\r\n                        setSummaryError(false);\r\n                        setSummary(e.target.value);\r\n                      }\r\n                    }}\r\n                    onBlur={() => {\r\n                      if (summary === \"\") {\r\n                        setSummaryError(true);\r\n                      }\r\n                    }}\r\n                  />\r\n                }\r\n                control={control}\r\n              />\r\n\r\n              <FormControl variant=\"outlined\" fullWidth>\r\n                <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                  Tags\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-mutiple-chip-label\"\r\n                  id=\"demo-mutiple-chip\"\r\n                  multiple\r\n                  value={selectedTags}\r\n                  renderValue={(selected) => selected.join(\", \")}\r\n                  onChange={(selected) => {\r\n                    //var newSelectedTags = tags;\r\n                    //newSelectedTags.push(selected.target.value);\r\n                    setSelectedTags(selected.target.value);\r\n                  }}\r\n                  input={<Input id=\"select-multiple-chip\" />}\r\n                  MenuProps={MenuProps}\r\n                >\r\n                  {tags.map(function (tag) {\r\n                    return (\r\n                      <MenuItem key={tag} value={tag}>\r\n                        <Checkbox checked={selectedTags.indexOf(tag) > -1} />\r\n                        <ListItemText primary={tag} />\r\n                      </MenuItem>\r\n                    );\r\n                  })}\r\n                </Select>\r\n              </FormControl>\r\n              <Paper component=\"ul\" className={classes.paperChips}>\r\n                {selectedTags.map((data) => {\r\n                  return (\r\n                    <li key={data}>\r\n                      <Chip\r\n                        label={data}\r\n                        className={classes.chip}\r\n                        onDelete={handleTagsDelete(data)}\r\n                      />\r\n                    </li>\r\n                  );\r\n                })}\r\n              </Paper>\r\n\r\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDatePicker\r\n                  disableToolbar\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  id=\"date\"\r\n                  label=\"Date\"\r\n                  value={date}\r\n                  onChange={(date) => setDate(date)}\r\n                  KeyboardButtonProps={{\r\n                    \"aria-label\": \"change date\",\r\n                  }}\r\n                />\r\n              </MuiPickersUtilsProvider>\r\n\r\n              <Grid\r\n                container\r\n                direction={\"column\"}\r\n                spacing={1}\r\n                className={classes.dflex}\r\n              >\r\n                <Grid item xs={9}>\r\n                  <TextField\r\n                    error={imageError}\r\n                    value={imageName}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    disabled\r\n                    id=\"image\"\r\n                    label=\"Image\"\r\n                    name=\"image\"\r\n                    helperText={imageError ? \"Required\" : \"\"}\r\n                    onChange={(e) => {\r\n                      if (e.target.value === \"\") {\r\n                        setImageError(true);\r\n                      } else {\r\n                        setImageError(false);\r\n                      }\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                  <input\r\n                    accept=\"image/*\"\r\n                    className={classes.input}\r\n                    id=\"contained-button-file\"\r\n                    type=\"file\"\r\n                    style={{ display: \"none\" }}\r\n                    onChange={(event) => {\r\n                      setImage(event.target.files[0]);\r\n                      setImageName(event.target.files[0].name);\r\n                    }}\r\n                  />\r\n                  <label htmlFor=\"contained-button-file\">\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      component=\"span\"\r\n                      fullWidth\r\n                    >\r\n                      Browse\r\n                    </Button>\r\n                  </label>\r\n                </Grid>\r\n              </Grid>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button\r\n                onClick={() => setUpdateDialog(false)}\r\n                variant=\"contained\"\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                onClick={() => {\r\n                  //console.log(selectedTags);\r\n                  console.log(control.getValues());\r\n                  setUpdateProgress(true);\r\n                  var choice = \"new\";\r\n                  var formData = new FormData();\r\n                  formData.append(\"file\", image);\r\n                  formData.append(\"title\", control.getValues().title);\r\n                  formData.append(\"summary\", control.getValues().summary);\r\n                  formData.append(\"tags\", selectedTags);\r\n                  formData.append(\"issuedby\", selectedIssuers);\r\n                  formData.append(\"date\", date);\r\n                  if (addOrUpdate === \"Update\") {\r\n                    choice = \"update\";\r\n                    formData.append(\"_id\", decisionId);\r\n                  }\r\n                  axios.create({ baseURL: window.location.origin });\r\n                  axios\r\n                    .post(\"/api/upload_decisions/\" + choice, formData)\r\n                    .then(function (response) {\r\n                      console.log(response);\r\n                      setUpdateProgress(false);\r\n                      setUpdateDialog(false);\r\n                    })\r\n                    .catch(function (error) {\r\n                      console.log(error);\r\n                      if (error) {\r\n                        setUpdateProgress(false);\r\n                        setUpdateDialog(false);\r\n                        setErrorMessage(\"An error occured. Please try again.\");\r\n                        setAuthError(true);\r\n                      }\r\n                    });\r\n                }}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n              >\r\n                {!updateProgress && addOrUpdate}\r\n                {updateProgress && (\r\n                  <CircularProgress color=\"secondary\" size={20} />\r\n                )}\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n          <Dialog\r\n            open={boardDialog}\r\n            onClose={() => setBoardDialog(false)}\r\n            aria-labelledby=\"form-dialog-title\"\r\n          >\r\n            <DialogTitle id=\"form-dialog-title\">{addOrUpdate}</DialogTitle>\r\n            <DialogContent>\r\n              <Controller\r\n                name=\"boardSubject\"\r\n                as={\r\n                  <TextField\r\n                    //error={titleError}\r\n                    value={boardSubject}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"boardSubject\"\r\n                    label=\"Subject\"\r\n                    name=\"boardSubject\"\r\n                    autoComplete=\"boardSubject\"\r\n                    //helperText={titleError ? \"Required\" : \"\"}\r\n                    onChange={(e) => {\r\n                      if (e.target.value === \"\") {\r\n                        //setTitleError(true);\r\n                        setBoardSubject(e.target.value);\r\n                      } else {\r\n                        //setTitleError(false);\r\n                        setBoardSubject(e.target.value);\r\n                      }\r\n                    }}\r\n                    onBlur={() => {\r\n                      if (boardSubject === \"\") {\r\n                        //setTitleError(true);\r\n                      }\r\n                    }}\r\n                    autoFocus\r\n                  />\r\n                }\r\n                control={control}\r\n              />\r\n\r\n              <Controller\r\n                name=\"boardDecision\"\r\n                as={\r\n                  <TextField\r\n                    //error={summaryError}\r\n                    value={boardDecision}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    multiline\r\n                    id=\"boardDecision\"\r\n                    label=\"Decision\"\r\n                    name=\"boardDecision\"\r\n                    autoComplete=\"boardDecision\"\r\n                    //helperText={summaryError ? \"Required\" : \"\"}\r\n                    onChange={(e) => {\r\n                      if (e.target.value === \"\") {\r\n                        //setSummaryError(true);\r\n                        setBoardDecision(e.target.value);\r\n                      } else {\r\n                        //setSummaryError(false);\r\n                        setBoardDecision(e.target.value);\r\n                      }\r\n                    }}\r\n                    onBlur={() => {\r\n                      if (boardDecision === \"\") {\r\n                        //setSummaryError(true);\r\n                      }\r\n                    }}\r\n                  />\r\n                }\r\n                control={control}\r\n              />\r\n\r\n              <FormControl variant=\"outlined\" fullWidth>\r\n                <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                  Department\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-mutiple-chip-label\"\r\n                  id=\"demo-mutiple-chip\"\r\n                  value={boardDepartment}\r\n                  onChange={(selected) => {\r\n                    //var newSelectedTags = tags;\r\n                    //newSelectedTags.push(selected.target.value);\r\n                    setBoardDepartment(selected.target.value);\r\n                  }}\r\n                  input={<Input id=\"select-multiple-chip\" />}\r\n                  MenuProps={MenuProps}\r\n                >\r\n                  <MenuItem\r\n                    key={\"Managerial Affairs\"}\r\n                    value={\"Managerial Affairs\"}\r\n                  >\r\n                    <ListItemText primary={\"Managerial Affairs\"} />\r\n                  </MenuItem>\r\n                  <MenuItem\r\n                    key={\"Education and Student Affairs\"}\r\n                    value={\"Education and Student Affairs\"}\r\n                  >\r\n                    <ListItemText primary={\"Education and Student Affairs\"} />\r\n                  </MenuItem>\r\n                  <MenuItem\r\n                    key={\"Postgraduate Affairs\"}\r\n                    value={\"Postgraduate Affairs\"}\r\n                  >\r\n                    <ListItemText primary={\"Postgraduate Affairs\"} />\r\n                  </MenuItem>\r\n                  <MenuItem\r\n                    key={\"Development and Innovation Affairs\"}\r\n                    value={\"Development and Innovation Affairs\"}\r\n                  >\r\n                    <ListItemText\r\n                      primary={\"Development and Innovation Affairs\"}\r\n                    />\r\n                  </MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <FormControl variant=\"outlined\" fullWidth>\r\n                <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                  Status\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-mutiple-chip-label\"\r\n                  id=\"demo-mutiple-chip\"\r\n                  value={boardStatus}\r\n                  onChange={(selected) => {\r\n                    //var newSelectedTags = tags;\r\n                    //newSelectedTags.push(selected.target.value);\r\n                    setBoardStatus(selected.target.value);\r\n                  }}\r\n                  input={<Input id=\"select-multiple-chip\" />}\r\n                  MenuProps={MenuProps}\r\n                >\r\n                  <MenuItem key={\"Finished\"} value={\"Finished\"}>\r\n                    <ListItemText primary={\"Finished\"} />\r\n                  </MenuItem>\r\n                  <MenuItem key={\"Postponed\"} value={\"Postponed\"}>\r\n                    <ListItemText primary={\"Postponed\"} />\r\n                  </MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n\r\n              <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDatePicker\r\n                  disableToolbar\r\n                  fullWidth\r\n                  variant=\"outlined\"\r\n                  margin=\"normal\"\r\n                  id=\"date\"\r\n                  label=\"Date\"\r\n                  value={boardDate}\r\n                  onChange={(date) => setBoardDate(date)}\r\n                  KeyboardButtonProps={{\r\n                    \"aria-label\": \"change date\",\r\n                  }}\r\n                />\r\n              </MuiPickersUtilsProvider>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={() => setBoardDialog(false)} variant=\"contained\">\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                onClick={() => {\r\n                  //console.log(selectedTags);\r\n                  console.log(control.getValues());\r\n                  setUpdateProgress(true);\r\n                  var choice = \"new\";\r\n                  if (addOrUpdate === \"Update\") {\r\n                    choice = \"update\";\r\n                  }\r\n                  axios.create({ baseURL: window.location.origin });\r\n                  axios\r\n                    .post(\"/api/upload_board_decisions/\" + choice, {\r\n                      subject: control.getValues().boardSubject,\r\n                      department: boardDepartment,\r\n                      decision: control.getValues().boardDecision,\r\n                      status: boardStatus,\r\n                      date: boardDate,\r\n                      ...(addOrUpdate === \"Update\"\r\n                        ? { _id: boardDecisionId }\r\n                        : {}),\r\n                    })\r\n                    .then(function (response) {\r\n                      console.log(response);\r\n                      setUpdateProgress(false);\r\n                      setBoardDialog(false);\r\n                    })\r\n                    .catch(function (error) {\r\n                      console.log(error);\r\n                      if (error) {\r\n                        setUpdateProgress(false);\r\n                        setUpdateDialog(false);\r\n                        setErrorMessage(\"An error occured. Please try again.\");\r\n                        setAuthError(true);\r\n                      }\r\n                    });\r\n                }}\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n              >\r\n                {!updateProgress && addOrUpdate}\r\n                {updateProgress && (\r\n                  <CircularProgress color=\"secondary\" size={20} />\r\n                )}\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n\r\n          <Dialog\r\n            open={userDialog}\r\n            onClose={() => setUserDialog(false)}\r\n            aria-labelledby=\"form-dialog-title\"\r\n          >\r\n            <DialogTitle id=\"form-dialog-title\">Update User</DialogTitle>\r\n            <DialogContent>\r\n              <Controller\r\n                name=\"firstName\"\r\n                defaultValue={firstName}\r\n                as={\r\n                  <TextField\r\n                    //error={titleError}\r\n                    value={firstName}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"firstName\"\r\n                    label=\"First Name\"\r\n                    name=\"firstName\"\r\n                    autoComplete=\"firstName\"\r\n                    //helperText={titleError ? \"Required\" : \"\"}\r\n                    onChange={(e) => {\r\n                      if (e.target.value === \"\") {\r\n                        //setTitleError(true);\r\n                        //setTitle(e.target.value);\r\n                      } else {\r\n                        //setTitleError(false);\r\n                        setFirstName(e.target.value);\r\n                      }\r\n                    }}\r\n                    onBlur={() => {\r\n                      if (firstName === \"\") {\r\n                        //setTitleError(true);\r\n                      }\r\n                    }}\r\n                    autoFocus\r\n                  />\r\n                }\r\n                control={control}\r\n              />\r\n\r\n              <Controller\r\n                name=\"lastName\"\r\n                defaultValue={lastName}\r\n                as={\r\n                  <TextField\r\n                    //error={titleError}\r\n                    value={lastName}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"lastName\"\r\n                    label=\"Last Name\"\r\n                    name=\"lastName\"\r\n                    autoComplete=\"lastName\"\r\n                    //helperText={titleError ? \"Required\" : \"\"}\r\n                    onChange={(e) => {\r\n                      if (e.target.value === \"\") {\r\n                        //setTitleError(true);\r\n                        //setTitle(e.target.value);\r\n                      } else {\r\n                        //setTitleError(false);\r\n                        setLastName(e.target.value);\r\n                      }\r\n                    }}\r\n                    onBlur={() => {\r\n                      if (lastName === \"\") {\r\n                        //setTitleError(true);\r\n                      }\r\n                    }}\r\n                  />\r\n                }\r\n                control={control}\r\n              />\r\n\r\n              <Controller\r\n                name=\"email\"\r\n                defaultValue={email}\r\n                as={\r\n                  <TextField\r\n                    //error={titleError}\r\n                    value={email}\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"email\"\r\n                    label=\"Email\"\r\n                    name=\"email\"\r\n                    autoComplete=\"email\"\r\n                    //helperText={titleError ? \"Required\" : \"\"}\r\n                    onChange={(e) => {\r\n                      if (e.target.value === \"\") {\r\n                        //setTitleError(true);\r\n                        //setTitle(e.target.value);\r\n                      } else {\r\n                        //setTitleError(false);\r\n                        setEmail(e.target.value);\r\n                      }\r\n                    }}\r\n                    onBlur={() => {\r\n                      if (email === \"\") {\r\n                        //setTitleError(true);\r\n                      }\r\n                    }}\r\n                  />\r\n                }\r\n                control={control}\r\n              />\r\n\r\n              <FormControl variant=\"outlined\" fullWidth>\r\n                <InputLabel id=\"demo-simple-select-outlined-label\">\r\n                  Privilege\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"demo-mutiple-chip-label\"\r\n                  id=\"demo-mutiple-chip\"\r\n                  value={userPrivilege}\r\n                  defaultValue={userPrivilege}\r\n                  disabled={privilege < 2}\r\n                  onChange={(selected) => {\r\n                    //var newSelectedTags = tags;\r\n                    //newSelectedTags.push(selected.target.value);\r\n                    setUserPrivilege(selected.target.value);\r\n                  }}\r\n                  input={<Input id=\"select-multiple-chip\" />}\r\n                  MenuProps={MenuProps}\r\n                >\r\n                  <MenuItem key={\"None\"} value={\"None\"}>\r\n                    <ListItemText primary={\"None\"} />\r\n                  </MenuItem>\r\n                  <MenuItem key={\"View\"} value={\"View\"}>\r\n                    <ListItemText primary={\"View\"} />\r\n                  </MenuItem>\r\n                  <MenuItem key={\"View/Update\"} value={\"View/Update\"}>\r\n                    <ListItemText primary={\"View/Update\"} />\r\n                  </MenuItem>\r\n                  <MenuItem key={\"Admin\"} value={\"Admin\"}>\r\n                    <ListItemText primary={\"Admin\"} />\r\n                  </MenuItem>\r\n                </Select>\r\n              </FormControl>\r\n              <DialogActions>\r\n                <Button\r\n                  onClick={() => setUserDialog(false)}\r\n                  variant=\"contained\"\r\n                >\r\n                  Cancel\r\n                </Button>\r\n                <Button\r\n                  onClick={() => {\r\n                    var privilegeLevel = 0;\r\n                    if (userPrivilege === \"Add\") {\r\n                      privilegeLevel = 1;\r\n                    } else if (userPrivilege === \"Add/Update\") {\r\n                      privilegeLevel = 2;\r\n                    } else if (userPrivilege === \"Admin\") {\r\n                      privilegeLevel = 3;\r\n                    }\r\n                    axios.create({ baseURL: window.location.origin });\r\n                    axios\r\n                      .post(\"/api/user/update\", {\r\n                        firstName: control.getValues().firstName,\r\n                        lastName: control.getValues().lastName,\r\n                        email: control.getValues().email,\r\n                        privilege: privilegeLevel,\r\n                        _id: userId,\r\n                      })\r\n                      .then(function (response) {\r\n                        console.log(response);\r\n                        setUpdateProgress(false);\r\n                        setUserDialog(false);\r\n                      })\r\n                      .catch(function (error) {\r\n                        console.log(error);\r\n                        if (error) {\r\n                          setUpdateProgress(false);\r\n                          setUserDialog(false);\r\n                          setErrorMessage(\r\n                            \"An error occured. Please try again.\"\r\n                          );\r\n                          setAuthError(true);\r\n                        }\r\n                      });\r\n                  }}\r\n                  color=\"primary\"\r\n                  variant=\"contained\"\r\n                >\r\n                  {!updateProgress && \"Update\"}\r\n                  {updateProgress && (\r\n                    <CircularProgress color=\"secondary\" size={20} />\r\n                  )}\r\n                </Button>\r\n              </DialogActions>\r\n            </DialogContent>\r\n          </Dialog>\r\n\r\n          <Dialog\r\n            open={authError}\r\n            TransitionComponent={Transition}\r\n            keepMounted\r\n            onClose={() => setAuthError(false)}\r\n            aria-labelledby=\"alert-dialog-slide-title\"\r\n            aria-describedby=\"alert-dialog-slide-description\"\r\n          >\r\n            <DialogTitle id=\"alert-dialog-slide-title\">{\"Error\"}</DialogTitle>\r\n            <DialogContent>\r\n              <DialogContentText id=\"alert-dialog-slide-description\">\r\n                {errorMessage}\r\n              </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n              <Button onClick={() => setAuthError(false)} color=\"primary\">\r\n                Close\r\n              </Button>\r\n            </DialogActions>\r\n          </Dialog>\r\n        </main>\r\n      </div>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","C:\\Users\\Beta\\Documents\\Projects\\GovDas2.0\\client\\src\\Register.js",[],"C:\\Users\\Beta\\Documents\\Projects\\GovDas2.0\\client\\src\\history.js",[],"C:\\Users\\Beta\\Documents\\Projects\\GovDas2.0\\client\\src\\Login.js",[],"C:\\Users\\Beta\\Documents\\Projects\\GovDas2.0\\client\\src\\Routes.js",[],"C:\\Users\\Beta\\Documents\\Projects\\GovDas2.0\\client\\src\\Dashboard2.js",["46","47","48","49","50","51","52","53","54","55","56","57","58","59","60","61"],"C:\\Users\\Beta\\Documents\\Projects\\GovDas2.0\\client\\src\\Login2.js",[],"C:\\Users\\Beta\\Documents\\Projects\\GovDas2.0\\client\\src\\Print.js",["62"],"import React from \"react\";\r\nimport {\r\n  Page,\r\n  Text,\r\n  View,\r\n  Document,\r\n  StyleSheet,\r\n  Font,\r\n  Image\r\n} from \"@react-pdf/renderer\";\r\nimport Tajawal from \"./fonts/Tajawal-Regular.ttf\";\r\nimport logo from \"./images/eelu.png\";\r\nconst _ = require(\"underscore\");\r\n\r\nFont.register({\r\n  family: \"Tajawal\",\r\n  src: Tajawal,\r\n});\r\n\r\nconst styles = StyleSheet.create({\r\n  body: {\r\n    paddingTop: 35,\r\n    paddingBottom: 65,\r\n    paddingHorizontal: 35,\r\n    border: 30,\r\n    textAlign: \"right\",\r\n    direction: \"rtl\",\r\n  },\r\n  title: {\r\n    fontSize: 16,\r\n    textAlign: \"center\",\r\n    fontFamily: \"Tajawal\",\r\n  },\r\n  author: {\r\n    fontSize: 12,\r\n    textAlign: \"center\",\r\n    marginBottom: 40,\r\n  },\r\n  subtitle: {\r\n    fontSize: 18,\r\n    margin: 12,\r\n  },\r\n  text: {\r\n    margin: \"5 12 5 12\",\r\n    fontSize: 12,\r\n    textAlign: \"right\",\r\n    fontFamily: \"Tajawal\",\r\n  },\r\n  image: {\r\n    marginVertical: 15,\r\n    maxWidth: 100,\r\n    marginRight: 100,\r\n  },\r\n  header: {\r\n    fontSize: 12,\r\n    marginBottom: 20,\r\n    textAlign: \"center\",\r\n    color: \"grey\",\r\n  },\r\n  pageNumber: {\r\n    position: \"absolute\",\r\n    fontSize: 12,\r\n    bottom: 30,\r\n    left: 0,\r\n    right: 0,\r\n    textAlign: \"center\",\r\n    color: \"grey\",\r\n  },\r\n  section: {\r\n    margin: 5,\r\n    padding: 5,\r\n    //flexGrow: 1,\r\n  },\r\n  department: {\r\n    backgroundColor: \"gray\",\r\n    paddingTop: 3,\r\n    fontFamily: \"Tajawal\",\r\n    margin: 12,\r\n    fontSize: 14,\r\n    textDecoration: \"underline\",\r\n    display: \"inline-block\",\r\n  },\r\n});\r\n\r\nexport default class Print extends React.Component {\r\n  render() {\r\n    console.log(this.props);\r\n    var subjects = this.props.subjects;\r\n    var number = this.props.meeting.number;\r\n    var date = this.props.meeting.date;\r\n    var subjectsGrouped = _.groupBy(subjects, \"department\");\r\n    var index = 0;\r\n\r\n    function SubjectGroup(props) {\r\n      //console.log(props);\r\n      return (\r\n        <View style={styles.section}>\r\n          {props.department && props.department !== \"undefined\" && (\r\n            <Text style={styles.department}>{props.department}</Text>\r\n          )}\r\n          {props.subjects.map(function (subject) {\r\n            if (subject) {\r\n              index++;\r\n              return (\r\n                <Text style={styles.text}>\r\n                  {\" \" + subject.subject + \" \"} : {\" \" + index + \" \"}Ø§ÙÙÙØ¶ÙØ¹ Ø±ÙÙ\r\n                </Text>\r\n              );\r\n            }\r\n          })}\r\n        </View>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Document>\r\n        <Page size=\"A4\" style={styles.body}>\r\n          <Image style={styles.image} src={logo} fixed />\r\n          <View style={styles.section}>\r\n            <Text style={styles.title}>Ø¬Ø¯ÙÙ Ø§Ø¹ÙØ§Ù</Text>\r\n            <Text style={styles.title}>\r\n              Ø§Ø¬ØªÙØ§Ø¹ ÙØ¬ÙØ³ Ø§ÙØ¬Ø§ÙØ¹Ø© Ø§ÙÙØµØ±ÙØ© ÙÙØªØ¹ÙÙ Ø§ÙØ§ÙÙØªØ±ÙÙÙ Ø§ÙØ§ÙÙÙØ©\r\n            </Text>\r\n            <Text style={styles.title}>\r\n              {date} Ø§ÙÙÙØ¹ÙØ¯Ø© Ø¨ØªØ§Ø±ÙØ® {\" (\" + number + \") \"} Ø§ÙØ¬ÙØ³Ø© Ø±ÙÙ\r\n            </Text>\r\n          </View>\r\n          {Object.entries(subjectsGrouped).map(function (subject) {\r\n            console.log(subject[0]);\r\n            return (\r\n              <SubjectGroup department={subject[0]} subjects={subject[1]} />\r\n            );\r\n          })}\r\n          <Text\r\n            style={styles.pageNumber}\r\n            render={({ pageNumber, totalPages }) =>\r\n              `${pageNumber} / ${totalPages}`\r\n            }\r\n            fixed\r\n          />\r\n        </Page>\r\n      </Document>\r\n    );\r\n  }\r\n}\r\n",{"ruleId":"63","severity":1,"message":"64","line":200,"column":21,"nodeType":"65","messageId":"66","endLine":200,"endColumn":33},{"ruleId":"63","severity":1,"message":"67","line":211,"column":10,"nodeType":"65","messageId":"66","endLine":211,"endColumn":18},{"ruleId":"63","severity":1,"message":"68","line":219,"column":10,"nodeType":"65","messageId":"66","endLine":219,"endColumn":23},{"ruleId":"63","severity":1,"message":"69","line":220,"column":10,"nodeType":"65","messageId":"66","endLine":220,"endColumn":19},{"ruleId":"63","severity":1,"message":"70","line":245,"column":17,"nodeType":"65","messageId":"66","endLine":245,"endColumn":25},{"ruleId":"63","severity":1,"message":"71","line":757,"column":9,"nodeType":"65","messageId":"66","endLine":757,"endColumn":28},{"ruleId":"63","severity":1,"message":"72","line":23,"column":8,"nodeType":"65","messageId":"66","endLine":23,"endColumn":22},{"ruleId":"63","severity":1,"message":"64","line":204,"column":21,"nodeType":"65","messageId":"66","endLine":204,"endColumn":33},{"ruleId":"63","severity":1,"message":"67","line":215,"column":10,"nodeType":"65","messageId":"66","endLine":215,"endColumn":18},{"ruleId":"63","severity":1,"message":"68","line":223,"column":10,"nodeType":"65","messageId":"66","endLine":223,"endColumn":23},{"ruleId":"63","severity":1,"message":"69","line":224,"column":10,"nodeType":"65","messageId":"66","endLine":224,"endColumn":19},{"ruleId":"63","severity":1,"message":"70","line":249,"column":17,"nodeType":"65","messageId":"66","endLine":249,"endColumn":25},{"ruleId":"63","severity":1,"message":"73","line":257,"column":10,"nodeType":"65","messageId":"66","endLine":257,"endColumn":23},{"ruleId":"63","severity":1,"message":"74","line":263,"column":10,"nodeType":"65","messageId":"66","endLine":263,"endColumn":22},{"ruleId":"63","severity":1,"message":"75","line":263,"column":24,"nodeType":"65","messageId":"66","endLine":263,"endColumn":39},{"ruleId":"63","severity":1,"message":"76","line":341,"column":13,"nodeType":"65","messageId":"66","endLine":341,"endColumn":18},{"ruleId":"63","severity":1,"message":"71","line":952,"column":9,"nodeType":"65","messageId":"66","endLine":952,"endColumn":28},{"ruleId":"77","severity":1,"message":"78","line":1519,"column":32,"nodeType":"79","messageId":"80","endLine":1519,"endColumn":34},{"ruleId":"81","severity":1,"message":"82","line":1523,"column":52,"nodeType":"83","messageId":"84","endLine":1523,"endColumn":61},{"ruleId":"85","severity":1,"message":"86","line":1533,"column":58,"nodeType":"79","messageId":"87","endLine":1533,"endColumn":59},{"ruleId":"85","severity":1,"message":"86","line":1533,"column":71,"nodeType":"79","messageId":"87","endLine":1533,"endColumn":72},{"ruleId":"81","severity":1,"message":"82","line":1818,"column":36,"nodeType":"83","messageId":"84","endLine":1818,"endColumn":45},{"ruleId":"81","severity":1,"message":"82","line":101,"column":31,"nodeType":"83","messageId":"84","endLine":101,"endColumn":40},"no-unused-vars","'setPrivilege' is assigned a value but never used.","Identifier","unusedVar","'issuedBy' is assigned a value but never used.","'issuedByError' is assigned a value but never used.","'tagsError' is assigned a value but never used.","'setBoard' is assigned a value but never used.","'handleIssuersDelete' is assigned a value but never used.","'LocalOfferIcon' is defined but never used.","'meetingNumber' is assigned a value but never used.","'componentRef' is assigned a value but never used.","'setComponentRef' is assigned a value but never used.","'index' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a value to be returned at the end of function.","FunctionExpression","expectedAtEnd","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat"]